MULTITHREADING - PART ONE

It is the process of executing multiple threads simultaneously.

Multitasking is a process of executing multiple tasks simultaneously. It is achieved by using two ways.
1. Process based.
2. Thread based.

Examples of multitasking:

In online sesion, what are the different activities done by students as?
- Listen to the class.
- Taking running notes.
- Checking mobile.
etc.

1. Process Based:

- Executing several task simultaneously where each task is separate independent process such 
as multitasking is called as process based.

- Example 1- Typing java program int eclipse, also listening the audio songs, download a file from internet.

- In this every activity is independent process here.

- Example 2- Task manager, see the multiple process list.

- Process is heavy weight components.

- Each process has own address into memory.

2. Thread Based:

- Executing several tasks simulatneously where each task is separate part of same program 
called as thread based.

- Example 1- Suppose I have 1000 lines of code into java program and it will takes 4 hous to 
execute it where first 500 lines is executes after that remaining 500 lines is executed  but 
there is no any dependency between them so I can run that task simultaneusly to minimize the 
execution time.

- Thread is light weight components.

- Thread shares the same address space.


* What is thread?

It is the smallest unit of program called as thread.

* How to create a thread?

So, There are two ways to create a thread as:

1. By extending the Thread class.
2. By Implementing Runnable interface.

1. By extending the Thread class.

- Thread class provide constructors and methods to create and perform operations on a thread.
- Thread class extends Object class and implements Runnable interface.

#Constructors:

1. Thread()
2. Thread(String name)
3. Thread(Runnable r)
4. Thread(Runnable r, String name)

#Methods:

1. public void run(): is used to perform action for a thread.
2. public void satrt(): starts the execution of the thread. JVM calls the run() method on the 
thread.
3. public void sleep(long miliseconds): Causes the currently executing thread to sleep
(temporarily cease execution) for the specified number of miliseconds.
4. public void join(): waits for a thread to die.
5. public void join(long miliseconds): waits for a thread to diw for the specified 
miliseconds.
6. public int getPriority(): returns the priority of the thread.
7. public int setPriority(int priority): changes the priority of the thread.
8. public String getName(): returns the name of the thread.
9. public void setName(String name): changes the name of the thread.


2. By implementing Runnable interface:

- The Runnable interface should be implementing by any class whose instances are intended to 
be executed by a thread.
- Runnable interface have only one method named run().

Note:
If you are not extending the thread class, your class object would not be treated as thread 
object. So you need to explicitely create thread class object. We are passing the object of  
your class run() method may execute.

#WHEN?

Extending thread class- 
If the class is not extending another class then we should go for thread class.

Implementing Runnable interfact-
If our class is already extending another class then we could not use extend keyword due to
multiple inheritance. So best way to go for runnable interface.

# Difference between thread class and Runnable interface:
----------------------------------------------------------------------------------------------
|Sr. No.  |   	Key	       |              Thread	      |            Runnable          |
----------------------------------------------------------------------------------------------
|  1      |     Basic          |Thread is a class. It is used |Runnable is a functional      ||         |                    |to create a thread.           |interface which is used to    ||         |                    |                              |create a thread.              |
----------------------------------------------------------------------------------------------|  2      |     Methods        |It has multiple methods       |It has only absatrct method   ||         |                    |including start() and run()   |run()                         |
----------------------------------------------------------------------------------------------|  3      |                    |Each thread creates a unique  |Multiple threads shares the   |
|         |                    |object and gets associated    |the same objects.             ||         |                    |with it.                      |                              |
----------------------------------------------------------------------------------------------|  4      |     Memory         | More memory required.        | Less memory required.        |
----------------------------------------------------------------------------------------------|  5      |     Limitation     |Multiple inheritance is not   |If a class is implementing the||         |                    |allowed in java hence after a |runnable interface then your  ||         |                    |class extends Thread class, it|class can extend another class|
|         |                    |can not extend any other class|                              |
----------------------------------------------------------------------------------------------
# Advantages for multithreading in java:

The users are not blocked because threads are independent threads are independent, and we can perform multiple operations at times.

