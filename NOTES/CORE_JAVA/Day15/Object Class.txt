OBJECT CLASS:

It is the parent of all the classes in java.

It is called as topmost class of java which is present in java.lang package.

Every class in java is directly or indirectly derived from the object class. If a class does not extend any other class then it is direct child of object.

There are different methods of object class are as follows:
1. public final class getClass()
2. public int hashCode()
3. public boolean equals(Object obj)
4. protected Object clone() throws CloneNotSupportedException
5. public String toString()
6. public final void notify()
7. public final void notifyAll()
8. public final void wait()
9. public final void wait(long timeout)
10. public final void wait(long timeout, int nanos)
11. protected void finalize()throws Throwable


1. public final class getClass() –
This class is used to get the metadata of class.

Metadata like package name, class name,etc.


2. public int hashCode() –
For every object unique number is generated by JVM called as hashcode.

It does not represent object of address then what is the use of hashcode.

It will store into bucket based on hashcode.

Note- the most of java native method are written in c or c++ that why not able to show the body.


3. public boolean equals(Object obj) –

It compares the given object to this object.

There are two equals method, this equal method is used to check the address of String not contents.



4. public String toString()-

It returns the string representation of this object.

We will use toString method very often in future modules.

5. protected Object clone() throws CloneNotSupportedException –

It Create and returns the exact copy (clone)  of this object.

When we create the clone of object and try to get the value of that object we get address. 

To resolve this issue, we should override toString method.


6. public final void notify()-

It wakes up single thread, waiting on this object’s monitor.

7. public final void notifyAll()-

It wakes up all the threads, waiting on this object’s monitor.

8. public final void wait(long timeout) throws InterruptedException()-

It cause the current thread to wait for the specified milliseconds, until another thread notifies(invokes notify() or notifyAll() method).

9. public final void wait(long timeout, int nanos) throws InterruptedException()-

It cause the current thread to wait for the specified milliseconds and nanoseconds, until another thread notifies (invokes notify() or notifyAll() method).

10. public final void wait()throws InterruptedException-

It cause the current thread to wait, until another thread notifies (invokes notify() or notifyAll() method).

11. protected void finalize() throws Throwable-

It is invoked by the garbage collector before object is being garbage collected.

