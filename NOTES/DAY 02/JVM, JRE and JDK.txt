To understand JVM, JRE and JDK. You should understand the how they are related to each other. 
Let's assume a vein Diagram which consisting 3 circles, having JVM, JRE, JDK named respectively. 
For better understanding please look for the picture which I have attached in the folder.
(img: JVM,JRE, JDK vein diagram.jpg)

1. JVM:

The innermost circle in venn diagram is called JVM.

JVM stands for Java Virtual Machine. It is a abstract machine.

It is called a virtual machine because it doesn't physically exist.

It is a specification that provides a runtime environment in which Java bytecode can be executed.

It can also run those programs which are written in other languages and compiled to Java bytecode.

Java is platform independent. There are three notions of the JVM: specification, implementation, and instance.

The JVM performs the following main tasks:
1. Loads code
2. Verifies code
3. Executes code
4. Provides runtime environment

What is JVM?
It is:

A specification where working of Java Virtual Machine is specified. 
But implementation provider is independent to choose the algorithm. 
Its implementation has been provided by Oracle and other companies.

An implementation Its implementation is known as JRE (Java Runtime Environment).

Runtime Instance Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.


JVM provides definitions for the:
1. Memory area
2. Class file format
3. Register set
4. Garbage-collected heap
5. Fatal error reporting etc.


JVM Architecture:
Please go through the image present in the folder before reading below content. (Img: JVM architecture.jpg)

1) Classloader:

Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program, 
it is loaded first by the classloader. There are three built-in classloaders in Java.

1. Bootstrap ClassLoader: 
This is the first classloader which is the super class of Extension classloader.
It loads the rt.jar file which contains all class files of Java Standard Edition like java.lang package classes,
 java.net package classes, java.util package classes, java.io package classes, java.sql package classes etc.

2. Extension ClassLoader: 
This is the child classloader of Bootstrap and parent classloader of System classloader. 
It loades the jar files located inside $JAVA_HOME/jre/lib/ext directory.

3. System/Application ClassLoader: 
This is the child classloader of Extension classloader. It loads the classfiles from classpath. 
By default, classpath is set to current directory. You can change the classpath using "-cp" or "-classpath" switch. 
It is also known as Application classloader.


2) Class(Method) Area:
Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.

3) Heap:
It is the runtime data area in which objects are allocated.

4) Stack:
Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.

Each thread has a private JVM stack, created at the same time as thread.
A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.

5) Program Counter Register:
PC (program counter) register contains the address of the Java virtual machine instruction currently being executed.

6) Native Method Stack:
It contains all the native methods used in the application.

7) Execution Engine:
It contains:
1. A virtual processor

2. Interpreter: Read bytecode stream then execute the instructions.

3. Just-In-Time(JIT) compiler: 
It is used to improve the performance. 
JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of 
time needed for compilation. 
Here, the term "compiler" refers to a translator from the instruction set of a Java virtual machine (JVM) to the 
instruction set of a specific CPU.

8) Java Native Interface:

Java Native Interface (JNI) is a framework which provides an interface to communicate with another application 
written in another language like C, C++, Assembly etc. 
Java uses JNI framework to send output to the Console or interact with OS libraries.


2. JRE:

JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. 
The Java Runtime Environment is a set of software tools which are used for developing Java applications. 
It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. 
It contains a set of libraries + other files that JVM uses at runtime.
(Img: JRE.jpg)

The implementation of JVM is also actively released by other companies besides Sun Micro Systems.

3. JDK

JDK is an acronym for Java Development Kit. 
The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. 
It physically exists. It contains JRE + development tools.
(Img: JDK.jpg)

JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:
1. Standard Edition Java Platform
2. Enterprise Edition Java Platform
3. Micro Edition Java Platform
The JDK contains a private Java Virtual Machine (JVM) and a few other resources such as an interpreter/loader (java), 
a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc. to complete the development of a Java Application.

